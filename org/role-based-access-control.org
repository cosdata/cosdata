* RBAC Implementation for Vector Database
** Overview
This document outlines the design specifications for implementing Role-Based Access Control (RBAC) in our vector database system using serialized Rust structs and LMDB key-value store.

** Logical Schema Design
The logical schema represents the relationships between users, roles, permissions, and collections:

*** Core Entities
**** Users
- user_id (PK)
- username
- password_hash
- other attributes

**** Roles
- role_id (PK)
- role_name
- description

**** Permissions
Enumerated permission types:
- list_collections
- create_collection
- delete_collection
- list_index
- create_index
- delete_index
- upsert_vectors
- delete_vectors
- query_vectors
- list_versions
- set_current_version
- get_current_version

**** Collections
- collection_id (PK)
- collection_name
- other attributes

*** Relationships
**** User-Role (Many-to-Many)
- Each user can have multiple roles
- Each role can be assigned to multiple users

**** Role-Permission-Collection (Many-to-Many)
- Roles can have different permissions on different collections
- Same permission can be granted to multiple roles for the same collection

** Implementation Design

*** Data Structures (Rust)
#+begin_src rust
struct User {
   user_id: u32,
   username: String,
   password_hash: String,
   roles: Vec<u32>,  // List of role_ids
   // other attributes
}

struct Role {
   role_id: u32,
   role_name: String,
   description: String,
   permissions: Vec<(u32, Permission)>  // (collection_id, permission) pairs
}

enum Permission {
   ListCollections,
   CreateCollection,
   DeleteCollection,
   ListIndex,
   CreateIndex,
   DeleteIndex,
   UpsertVectors,
   DeleteVectors,
   QueryVectors,
   ListVersions,
   SetCurrentVersion,
   GetCurrentVersion,
}

struct Collection {
   collection_id: u32,
   collection_name: String,
   // other attributes
}
#+end_src

*** Storage Strategy (LMDB)
Since we lack a relational database, we'll use LMDB as a key-value store with the following key patterns:

| Data                         | Key Pattern                     | Value                                     |
|------------------------------+--------------------------------+-------------------------------------------|
| User objects                 | ~user:{user_id}~                | Serialized User struct                    |
| Role objects                 | ~role:{role_id}~                | Serialized Role struct                    |
| Collection objects           | *Reuse existing entries*        | Serialized Collection struct              |
| User-Role mappings           | ~user_roles:{user_id}~          | List of role_ids                          |
| Role-Permission-Collection   | ~role_permissions:{role_id}~    | List of (permission, collection_id) pairs |

*** Default Administration
- A default admin user will be created during system initialization
- This admin user will have full permissions on all collections
- Only the admin user can create other users initially
- The admin user can assign appropriate roles to new users

*** Access Control Workflow
1. Admin creates roles with specific permissions on collections
2. Admin assigns roles to users
3. When a user attempts an operation:
  a. System retrieves user's roles
  b. System checks if any role grants the required permission on the target collection
  c. Access is granted only if a matching permission is found

** Implementation Considerations

*** Serialization
- Use serde with appropriate format (CBOR/bincode) for serializing structs
- Handle serialization errors gracefully

*** ID Generation
- Implement monotonically increasing ID generation for users, roles, and collections
- Store current ID counters in LMDB

*** Performance Optimization
- Cache frequently accessed data (roles, permissions)
- Consider denormalizing some data to reduce lookups

*** Data Consistency
- Ensure atomic updates when modifying related data
- Implement proper error handling and rollback mechanisms

*** Security Considerations
- Store password hashes using strong cryptographic algorithms (e.g., sha256)
- Implement proper authentication before authorization checks
