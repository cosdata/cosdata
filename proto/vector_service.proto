syntax = "proto3";

package vector_service;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Common types
message Vector {
    string id = 1;
    optional string document_id = 2;
    repeated float dense_values = 3;
    repeated SparsePair sparse_values = 4;
    optional string text = 5;
}

message SparsePair {
    uint32 index = 1;
    float value = 2;
}

// Metadata types
message FieldValue {
    oneof value {
        int32 int_value = 1;
        string string_value = 2;
    }
}

message MetadataField {
    string name = 1;
    repeated FieldValue values = 2;
}

message SupportedCondition {
    enum OperationType {
        AND = 0;
        OR = 1;
    }
    OperationType op = 1;
    repeated string field_names = 2;
}

message MetadataSchema {
    repeated MetadataField fields = 1;
    repeated SupportedCondition supported_conditions = 2;
}

// Auth Service
service AuthService {
    rpc CreateSession(CreateSessionRequest) returns (CreateSessionResponse);
}

message CreateSessionRequest {
    string username = 1;
    string password = 2;
}

message CreateSessionResponse {
    string access_token = 1;
    uint64 created_at = 2;
    uint64 expires_at = 3;
    Claims claims = 4;
}

message Claims {
    uint64 exp = 1;
    uint64 iat = 2;
    string username = 3;
}

// Collections Service
service CollectionsService {
    rpc CreateCollection(CreateCollectionRequest) returns (CreateCollectionResponse);
    rpc GetCollections(GetCollectionsRequest) returns (GetCollectionsResponse);
    rpc GetCollection(GetCollectionRequest) returns (Collection);
    rpc DeleteCollection(DeleteCollectionRequest) returns (google.protobuf.Empty);
}

message DenseVectorOptions {
    uint32 dimension = 1;
    bool enabled = 2;
}

message SparseVectorOptions {
    bool enabled = 1;
    bool geofencing = 2;
}

message TFIDFOptions {
    bool enabled = 1;
}

message CollectionConfig {
    optional uint32 max_vectors = 1;
    optional uint32 replication_factor = 2;
}

message CreateCollectionRequest {
    string name = 1;
    optional string description = 2;
    DenseVectorOptions dense_vector = 3;
    SparseVectorOptions sparse_vector = 4;
    TFIDFOptions tf_idf_options = 5;
    optional MetadataSchema metadata_schema = 6;
    CollectionConfig config = 7;
    optional bool store_raw_text = 8;
}

message CreateCollectionResponse {
    string id = 1;
    string name = 2;
    optional string description = 3;
}

message GetCollectionsRequest {}

message GetCollectionsResponse {
    repeated Collection collections = 1;
}

message Collection {
    string name = 1;
    optional string description = 2;
}

message GetCollectionRequest {
    string id = 1;
}

message DeleteCollectionRequest {
    string id = 1;
}

// Indexes Service
service IndexesService {
    rpc CreateDenseIndex(CreateDenseIndexRequest) returns (google.protobuf.Empty);
    rpc CreateSparseIndex(CreateSparseIndexRequest) returns (google.protobuf.Empty);
}

enum DataType {
    BINARY = 0;
    QUATERNARY = 1;
    OCTAL = 2;
    U8 = 3;
    F16 = 4;
    F32 = 5;
}

message ValuesRange {
    float min = 1;
    float max = 2;
}

message AutoQuantization {
    uint32 sample_threshold = 1;
}

message ScalarQuantization {
    DataType data_type = 1;
    ValuesRange range = 2;
}

message HNSWParams {
    optional uint32 ef_construction = 1;
    optional uint32 ef_search = 2;
    optional uint32 num_layers = 3;
    optional uint64 max_cache_size = 4;
    optional uint32 level_0_neighbors_count = 5;
    optional uint32 neighbors_count = 6;
}

message CreateDenseIndexRequest {
    string collection_id = 1;
    string name = 2;
    string distance_metric_type = 3;
    oneof quantization {
        AutoQuantization auto = 4;
        ScalarQuantization scalar = 5;
    }
    HNSWParams hnsw_params = 6;
}

message CreateSparseIndexRequest {
    string collection_id = 1;
    string name = 2;
    uint32 quantization = 3;  // 16, 32, 64, or 128
}

// Transactions Service
service TransactionsService {
    rpc CreateTransaction(CreateTransactionRequest) returns (CreateTransactionResponse);
    rpc CommitTransaction(CommitTransactionRequest) returns (google.protobuf.Empty);
    rpc AbortTransaction(AbortTransactionRequest) returns (google.protobuf.Empty);
    rpc CreateVectorInTransaction(CreateVectorInTransactionRequest) returns (google.protobuf.Empty);
    rpc DeleteVectorInTransaction(DeleteVectorInTransactionRequest) returns (google.protobuf.Empty);
    rpc UpsertVectors(UpsertVectorsRequest) returns (google.protobuf.Empty);
}

enum IndexType {
    DENSE = 0;
    SPARSE = 1;
    TFIDF = 2;
}

message CreateTransactionRequest {
    string collection_id = 1;
}

message CreateTransactionResponse {
    string transaction_id = 1;
    google.protobuf.Timestamp created_at = 2;
}

message CommitTransactionRequest {
    string collection_id = 1;
    uint32 transaction_id = 2;
}

message AbortTransactionRequest {
    string collection_id = 1;
    uint32 transaction_id = 2;
}

message CreateVectorInTransactionRequest {
    string collection_id = 1;
    uint32 transaction_id = 2;
    Vector vector = 3;
}

message DeleteVectorInTransactionRequest {
    string collection_id = 1;
    uint32 transaction_id = 2;
    uint32 vector_id = 3;
}

message UpsertVectorsRequest {
    string collection_id = 1;
    uint32 transaction_id = 2;
    repeated Vector vectors = 3;
}

// Vectors Service
service VectorsService {
    rpc GetVector(GetVectorRequest) returns (VectorResponse);
    rpc FindSimilarVectors(FindSimilarVectorsRequest) returns (FindSimilarVectorsResponse);
}

message VectorResponse {
    Vector vector = 1;
}

message GetVectorRequest {
    string collection_id = 1;
    string vector_id = 2;
}

message FindSimilarVectorsRequest {
    string collection_id = 1;
    oneof query {
        FindSimilarDenseVectorsQuery dense = 2;
        FindSimilarSparseVectorsQuery sparse = 3;
        FindSimilarTFIDFDocumentQuery tf_idf = 4;
    }
}

message FindSimilarDenseVectorsQuery {
    repeated float vector = 1;
    optional uint64 top_k = 2;
    optional bool return_raw_text = 3;
}

message FindSimilarSparseVectorsQuery {
    repeated SparsePair values = 1;
    optional float early_terminate_threshold = 2;
    optional uint64 top_k = 3;
    optional bool return_raw_text = 4;
}

message FindSimilarTFIDFDocumentQuery {
    string query = 1;
    optional uint64 top_k = 2;
    optional bool return_raw_text = 3;
}

message SimilarVectorMatch {
    string id = 1;
    optional string document_id = 2;
    float score = 3;
    optional string text = 4;
}

message FindSimilarVectorsResponse {
    SearchResults results = 1;
    optional string warning = 2;
}

message SearchResults {
    repeated SimilarVectorMatch matches = 1;
}
